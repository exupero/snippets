snippet 'compd|dict comprehension' "Wrap selection in dict comprehension" ir
{${3:$2}: ${4:$2} for ${2:item} in ${1:${VISUAL:items}}${5: if ${6:$2}}}$0
endsnippet

snippet 'compg|generator comprehension' "Wrap selection in list comprehension" ir
(${3:$2} for ${2:item} in ${1:${VISUAL:items}}${4: if ${5:$3}})$0
endsnippet

snippet 'compl|list comprehension' "Wrap selection in list comprehension" ir
[${3:$2} for ${2:item} in ${1:${VISUAL:items}}${4: if ${5:$3}}]$0
endsnippet

snippet 'comps|set comprehension' "Wrap selection in set comprehension" ir
{${3:$2} for ${2:item} in ${1:${VISUAL:items}}${4: if ${5:$3}}}$0
endsnippet

snippet debug "Insert debugger breakpoint" b
import pdb; pdb.set_trace()
endsnippet

snippet def "Create a function" b
def ${1:function_name}(${2:, $3:*args, **kwargs}):
	${0:pass}
endsnippet

snippet 'def instance(?: method)?' "Create an instance method" br
def ${1:method_name}(self${2:, $3:*args, **kwargs}):
	${0:pass}
endsnippet

snippet 'def class(?: method)?' "Create a class method" br
@classmethod
def ${1:method_name}(cls, ${2:, $3:*args, **kwargs}):
	${0:pass}
endsnippet

snippet 'def static(?: method)?' "Create a static method" br
@staticmethod
def ${1:method_name}(${2:, $3:*args, **kwargs}):
	${0:pass}
endsnippet

snippet else "Create an 'if' block with the visual code as the 'else' clause" b
if ${1:condition}:
	${2:then}
else:
	${VISUAL}
endsnippet

snippet first "Get first item in an iterable"
next((${3:$2} for ${2:item} in ${1:${VISUAL:items}}${4: if ${5:$3}}), None)$0
endsnippet

global !p
def big_header(snip):
	text = snip.buffer[snip.line].strip().upper()
	c = '#'*len(text)

	snip.buffer[snip.line] = ''
	snip.expand_anon(f'##{c}\n# {text}\n##{c}')
endglobal
post_jump "big_header(snip)"
snippet 'header (.+)' "Add header comment" br
`!p snip.rv = match.group(1)`
endsnippet

snippet help "Call help() on visual selection" b
help(${VISUAL})
endsnippet

snippet loads "Wrap in json.loads()" i
json.loads(${VISUAL})
endsnippet

snippet opt "Wrap in Optional"
Optional[${VISUAL}]
endsnippet

snippet prn "Log a value" b
print(f'{${1:${VISUAL}}=}')
endsnippet

snippet spy "Log a value and return it" i
(lambda x: print(f'---${VISUAL}={x}') or x)(${VISUAL})
endsnippet

snippet 'system path' "description" b
import sys; sys.path.append('$1')$0
endsnippet

snippet timeit
timeit.timeit(lambda: ${VISUAL})
endsnippet

snippet try "Wrap code in a try block"
try:
	${VISUAL}
except Exception as e:
	${0:pass}
endsnippet
